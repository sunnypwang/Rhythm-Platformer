<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Pause Music
FMODInstanceSetPaused(global._stream,true); 

//Create Background

back = background_create_from_surface(application_surface,0,0,848,480,0,0)

//Initialize Variables

font = global.font;

selectIndex = 0;
menuMax = 4;

key_up = 0;
key_down = 0;
key_confirm = 0;
key_cancel = 0;

menuText[0] = "Return to Game"
menuText[1] = "Restart Level"
menuText[2] = "Toggle Metronome"
menuText[3] = "Return to Menu"

event_user(2);

instance_deactivate_all(1);
instance_activate_object(obj_persistent);
//instance_activate_object(obj_persistent_rhythm);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Input

key_up = keyboard_check_pressed(vk_up); 
key_down = keyboard_check_pressed(vk_down);  
key_confirm = keyboard_check_pressed(vk_space);
key_cancel = keyboard_check_pressed(ord('X'));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Menu Codes

//Navigating
if(key_up){
selectIndex-=1;
if(selectIndex&lt;0){
selectIndex = menuMax-1;
}
}

if(key_down){
selectIndex+=1;
if(selectIndex&gt;menuMax-1){
selectIndex = 0;
}
}

//Confirming
if(key_confirm){
event_user(0);
}


//Cancel
if(key_cancel){
instance_activate_all();
instance_destroy()
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Metronome Choice Text
if(global.metronome){
menuText[2] = "Metronome On"
}else{
menuText[2] = "Metronome Off"
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Confirming Choice

switch(selectIndex){
case 0:
FMODInstanceSetPaused(global._stream,false); 
instance_activate_all();
instance_destroy()
break;
case 1:
instance_activate_all();
FMODInstanceStop(global._stream);
room_goto(rm_lvintro)
instance_destroy()
break;
case 2:
global.metronome = !global.metronome;
event_user(2);
break;
case 3:
global.checkpoint=false;
instance_activate_all();
FMODInstanceStop(global._stream);
room_goto(rm_menu)
instance_destroy()
break;
default:
show_debug_message("error");
break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.font);
draw_set_halign(fa_center);

//Draw the screenshot if it exists
if (background_exists(back)) {

    //Disable alpha blending
    draw_enable_alphablend(0);
    
    //Draw screenshot
    draw_background_ext(back,view_xview[0],view_yview[0],0.5,0.5,0,c_white,1);
    
    //Enable alpha blending
    draw_enable_alphablend(1);
}

//Draw the message box
draw_sprite_ext(spr_pause,0,view_xview[0]+114,view_yview[0]+66,1,1,0,c_white,0.9);

for(i=0;i&lt;4;i+=1){
if(selectIndex==i){
draw_set_alpha(1);
}else{
draw_set_alpha(0.5);
}
draw_text(view_xview[0]+(view_wview[0]/2),view_yview[0]+86+19*i,menuText[i]);
}
draw_set_alpha(1);
draw_set_halign(fa_left);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
